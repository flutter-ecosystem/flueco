name: PR Validate Commits, Lints and Tests

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get all commits in the PR
        id: commits
        run: |
          git fetch origin ${{ github.base_ref }}
          git log origin/${{ github.base_ref }}..HEAD --pretty=format:'%s' > commit_messages.txt

      - name: Check commit messages for Conventional Commits
        run: |
          regex='^((feat|fix|chore|docs|style|refactor|perf|test|build|ci|revert)(\([a-zA-Z0-9_-]+(, [a-zA-Z0-9_-]+)*\))?: .+|Merge .+)$'
          while IFS= read -r line; do
            if ! [[ $line =~ $regex ]]; then
              echo "❌ Commit message does not follow Conventional Commits or merge commit style: $line"
              exit 1
            fi
          done < commit_messages.txt
          echo "✅ All commit messages follow Conventional Commits or are valid merge commits."

      - name: Check branch name style
        run: |
          branch_name="${{ github.head_ref }}"
          branch_regex='^(feat|fix|chore|docs|style|refactor|perf|test|build|ci|revert)\/[a-zA-Z0-9._\/-]+$'
          if ! [[ $branch_name =~ $branch_regex ]]; then
            echo "❌ Branch name does not follow required style: $branch_name"
            echo "Branch name must start with one of: feat/, fix/, chore/, docs/, style/, refactor/, perf/, test/, build/, ci/, revert/"
            exit 1
          fi
          echo "✅ Branch name follows required style."

  setup-deps:
    needs: validate-commits
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Cache Pub packages
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Verify Flutter version
        run: flutter --version

      - name: Install melos globally
        run: dart pub global activate melos

      - name: Install dependencies
        run: dart pub get --no-example && melos bs

  validate-lints:
    needs: setup-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Restore Pub packages cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install melos globally
        run: dart pub global activate melos

      # No need to install dependencies again

      - name: Verify formatting on every package
        run: melos run format:check

      - name: Analyze project source of every package
        run: melos run analyze:all

  validate-tests:
    needs: setup-deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Restore Pub packages cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install melos globally
        run: dart pub global activate melos

      # No need to install dependencies again

      - name: Run tests on every package
        run: melos run test
